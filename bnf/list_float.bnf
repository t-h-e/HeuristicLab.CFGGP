// *****************************************************************************
// list grammar for float list
// *****************************************************************************
//
// depends on: float (float, float_var)
// return: float
//         bool
//         int
// *****************************************************************************

<list_float_var> ::= 'lf'

<list_float_assign> ::= <list_float_var>' = '<list_float>

<list_float> ::= <list_float_var> | <list_float_slice>
<list_float_slice> ::= <list_float>'['<int>':'<int>']' | <list_float>'[:'<int>']' | <list_float>'['<int>':]'

<getListIndexCall_float> ::= 'getIndexFloatList('<list_float>', '<int>')'
<setListIndexToCall_float> ::= 'setListIndexTo('<list_float>', '<int>', '<float>')'
<deleteListItemCall_float> ::= 'deleteListItem('<list_float>', '<int>')'

// Add to

<call> ::= <list_float_var>'.append('<float>')'
         | <list_float_var>'.insert('<int>','<float>')'
         | <deleteListItemCall_float>
         | <setListIndexToCall_float>

<for> ::= <loop-header>'for forCounter% in '<list_float><loop-block>
        | <loop-header>'for '<float_var>' in '<list_float><loop-block>

// Generic for all

<in_list_comp_op> ::= 'in'|'not in'

// Return int

<ret_int> ::= 'len('<list_float>')'

// Return float

<ret_float> ::= <getListIndexCall_float>

// Return bool

<ret_bool> ::= <float> <in_list_comp_op> <list_float>

// *****************************************************************************
// Helper Code
// *****************************************************************************

def getIndexFloatList(curList, index):
  if not curList:
    return float()
  return curList[index % len(curList)]
