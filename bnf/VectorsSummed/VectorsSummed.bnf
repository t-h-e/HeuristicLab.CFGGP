// *****************************************************************************
// VectorSummed grammar
// *****************************************************************************

// structure

<predefined> ::= 'i0 = i1 = i2 = int()'
                 'li0 = li1 = li2 = []'
                 'res = []'
                 <code>

// *****************************************************************************
<int_var> ::= 'i0' | 'i1' | 'i2'
<list_int_var> ::= 'li0' | 'li1' | 'li2' | 'in0' | 'in1' | 'res'
// *****************************************************************************

<code> ::= <code><statement>'\n' | <statement>'\n'

<statement> ::= <simple_stmt> | <for>
<simple_stmt> ::= <call> | <assign>

            // from int
<assign> ::= <int_assign>
           // from list_int
           | <list_int_assign>

          // from list_int
<call> ::= <list_int_var>'.append('<int>')'
         | <list_int_var>'.insert('<int>','<int>')'
         | <deleteListItemCall_int>
         | <setListIndexToCall_int>

<block> ::= ':{:\n'<code>':}'

        // from list_float
<for> ::= <loop-header>'for forCounter% in '<list_int><loop-block>
        | <loop-header>'for '<int_var>' in '<list_int><loop-block>

<loop-header> ::= 'loopBreak% = 0\n'
// stop[0] is set by outer code to break immediately
<loop-block> ::=' :{:\n'<code>'\nif loopBreak% > loopBreakConst or stop[0]:{:\nbreak\n:}\nloopBreak% += 1:}'

// int

<int_assign> ::= <int_var> '=' <int> | <int_var> <arith_assign> <int>

<int> ::= <int_var> | <int_const>
        | <arith_prefix><int>
        | '(' <int> <arith_ops> <int> ')'
        | <int_arith_ops_protected>'('<int>','<int>')'
        | 'min('<int>', '<int>')'
        | 'max('<int>', '<int>')'
        | 'abs('<int>')'
        // from list_int
        | <getListIndexCall_int>
        | 'len('<list_int>')'

// to avoid problems with leading zeros in python int
<int_const> ::= 'int('<number>'.0)'
<number> ::= <number><num> | <num>
<num> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<arith_assign> ::= <arith_ops>'='
<arith_ops> ::= '+'|'-'|'*'
// ** raises ZeroDivision error when 'a = 0; a ** ~a'
// |'**'

<int_arith_ops_protected> ::= 'divInt' | 'mod'
<arith_prefix> ::= '+'|'-'
//|'~'

<comp_op> ::= '<'|'>'|'=='|'>='|'<='|'!='|'is'|'is not'

// list_int

<list_int_assign> ::= <list_int_var>' = '<list_int>

<list_int> ::= <list_int_var> | <list_int_range> | <list_int_slice>
<list_int_slice> ::= <list_int>'['<int>':'<int>']' | <list_int>'[:'<int>']' | <list_int>'['<int>':]'
<list_int_range> ::= 'list(saveRange('<int>','<int>'))'

<getListIndexCall_int> ::= 'getIndexIntList('<list_int>', '<int>')'
<setListIndexToCall_int> ::= 'setListIndexTo('<list_int>', '<int>', '<int>')'
<deleteListItemCall_int> ::= 'deleteListItem('<list_int>', '<int>')'
