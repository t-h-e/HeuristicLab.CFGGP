<predefined> ::= 'a = '<int_const>
                 'b = '<int_const>
                 'c = '<int_const>
				 'str_1 = '<string_const>
				 'str_2 = '<string_const>
                 'res = '<int_const>
                 <code>


<int_var> ::= 'a' | 'b' | 'c' | 'res' | 'inList[0]' | 'inList[1]'
<float_var> ::= 'inList[1]'
<bool_var> ::= 'x' | 'y'
<string_var> ::= 'str_1' | 'str_2'

<code> ::= <code><statement>'\n' | <statement>'\n'<code>'\n' | <statement>'\n'

<statement> ::= <simple_stmt> | <compound_stmt>
<simple_stmt> ::= <call> | <assign>
<compound_stmt> ::= <if> | <while> | <for>

<call> ::= <list_var>'.append('<int>')'
         | <list_var>'.insert('<int>','<int>')'
         | <deleteListItemCall>
         | <setListIndexToCall>


<assign> ::= <int_assing>
			| <bool_assign>
			| <string_assing>
			| <list_assign>
<int_assing> ::= <int_var> '=' <int> | <int_var> <arith_assign> <int>

<bool_assign> ::= <bool_var>' = '<bool>

<string_assing> ::= <string_var>' = '<string>

<list_assign> ::= <list_var>' = '<list>



<int> ::= <int_var> | <int_const> | <list_int>
        | <arith_prefix><int_var> | <arith_prefix><int_const> | <arith_prefix><list_int>
        | '(' <int> <arith_ops> <int> ')' |  <arith_prefix>'('<int> <arith_ops> <int>')'
        | <arith_ops_protected>'('<int>','<int>')' | <arith_prefix>'('<arith_ops_protected>'('<int>','<int>'))'
<list_int> ::= <getListIndexCall>

<bool> ::= <comp> | <bool_var> | <bool_const> | ( <bool> <bool_op> <bool> )
         | <bool_pre> <comp> | <bool_pre> <bool_var> | <bool_pre> <bool_const> | <bool_pre>( <bool> <bool_op> <bool> )

<string> ::= <string_var> | <string_const>

<comp> ::= <int> <comp_op> <int> | <int> <int_in_list_comp_op> <list>

<list> ::= <list_var> | <list_range> | <list_slice>
<list_slice> ::= <list>'['<int>':'<int>']' | <list>'[:'<int>']' | <list>'['<int>':]'
<list_range> ::= 'list(range('<int>','<int>'))'

<if> ::= <if-then> | <if-then><else>

<if-then> ::= 'if '<bool><block>
<else> ::= 'else'<block>

<block> ::= ':{:\n'<code>'\n:}\n'


<while> ::= <loop-header>'while '<bool><loop-block>
<for> ::= <loop-header>'for forCounter% in '<list><loop-block>
        | <loop-header>'for '<int_var>' in '<list><loop-block>

<loop-header> ::= 'loopBreak% = 0\n'
// stop[0] is set by program to break immediately
<loop-block> ::=' :{:\n'<code>'\nif loopBreak% > loopBreakConst or stop[0]:{:\nbreak\n:}\nloopBreak% += 1:}\n'

<comp_op> ::= '<'|'>'|'=='|'>='|'<='|'!='|'is'|'is not'
<int_in_list_comp_op> ::= 'in'|'not in'

<bool_const> ::= 'True' | 'False'
// avoid leading zeros, which lead to a syntax error
<int_const>   ::= <num><int_const_2> | <num+zero>
<int_const_2> ::= <int_const_2><num+zero> | <num+zero>
<num> ::=  1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<num+zero> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9


<string_const> ::= <string_const><string_literal> | <string_literal><string_const> | <string_literal>
<string_literal> ::= '' | '\n' | '\t' | ' ' | '!' | '"' | '#' | '$' | '%' | '&' | ''' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '[' | '\' | ']' | '^' | '_' | '`' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | '{' | '|' | '}'

<arith_assign> ::= <arith_ops>'='
<arith_ops> ::= '+'|'-'|'*'
// ** raises ZeroDivision error when 'a = 0; a ** ~a'
//|'**'

<arith_ops_protected> ::= 'div' | 'divInt' | 'mod'
<arith_prefix> ::= '+'|'-'

<bool_op> ::= 'and' | 'or'
<bool_pre> ::= 'not'

<getListIndexCall> ::= 'getIndex('<list>', '<int>')'
<deleteListItemCall> ::= 'deleteListItem('<list>', '<int>')'
<setListIndexToCall> ::= 'setListIndexTo('<list>', '<int>', '<int>')'
