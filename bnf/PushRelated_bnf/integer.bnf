// *****************************************************************************
// int grammar
// *****************************************************************************

<int_var> ::= // placholder for variable names

<assign> ::= <int_assign>
<int_assign> ::= <int_var> '=' <int> | <int_var> <arith_assign> <int>

<int> ::= <int_var> | <int_const>
        | <arith_prefix><int>
        | '(' <int> <arith_ops> <int> ')'
        | <int_arith_ops_protected>'('<int>','<int>')'
        | 'min('<int>', '<int>')'
        | 'max('<int>', '<int>')'
        | 'abs('<int>')'
        | '('<int> '+ 1)' | '('<int> '- 1)'

// to avoid problems with leading zeros in python int
<int_const> ::= 'int('<number>'.0)'

<arith_assign> ::= <arith_ops>'='
<arith_ops> ::= '+'|'-'|'*'
// ** raises ZeroDivision error when 'a = 0; a ** ~a'
// |'**'

<int_arith_ops_protected> ::= 'divInt' | 'mod'
<arith_prefix> ::= '+'|'-'
//|'~'

// Add to
<for> ::= <loop-header>'for forCounter% in saveRange(0, '<int>')'<loop-block>
        | <loop-header>'for '<int_var>' in saveRange(0, '<int>')'<loop-block>
        | <loop-header>'for forCounter% in saveRange('<int>', '<int>')'<loop-block>
        | <loop-header>'for '<int_var>' in saveRange('<int>', '<int>')'<loop-block>

// Return bool

<bool> ::= '('<int> <comp_op> <int>')' | 'bool('<int>')'

// Return float

<float> ::= <int>

// Return char

<char> ::= 'int_to_chr('<int>')'

// Return string

<string> ::= 'str('<int>')'
