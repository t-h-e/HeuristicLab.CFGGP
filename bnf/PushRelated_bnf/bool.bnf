// *****************************************************************************
// bool grammar
// *****************************************************************************

<bool_var> ::= // placholder for variable names

<assign> ::= <bool_assign>
<bool_assign> ::= <bool_var>' = '<bool>

<bool> ::= <bool_var> | <bool_const>
         | '('<bool_pre> <bool>')'
         | '('<bool> <bool_op> <bool>')'
         | '( not' <bool> 'and' <bool>')' // boolean_invert_first_then_and
         | '('<bool> 'and not' <bool>')' // boolean_invert_second_then_and

<bool_op> ::= 'and' | 'or' | '^' | '=='
<bool_pre> ::= 'not'

<bool_const> ::= 'True' | 'False'

// structure only need if bool is used

<compound_stmt> ::= <if> | <while>

<if> ::= <if-then> | <if-then><else>
<if-then> ::= 'if '<bool><block>
<else> ::= 'else'<block>
<block> ::= ':{:\n'<code>':}'

<while> ::= <loop-header>'while '<bool><loop-block>

// Return int

<int> ::= 'int('<bool>')'

// Return float

<float> ::= 'float('<bool>')'

// Return string

<string> ::= 'str('<bool>')'
