// *****************************************************************************
// list grammar for string list
// *****************************************************************************

<list_string_var> ::= // placholder for variable names

<assign> ::= <list_string_assign>
<list_string_assign> ::= <list_string_var>' = '<list_string>

<list_string> ::= <list_string_var> | <list_string_slice>
                | 'saveSplit('<string>','<string>')'
<list_string_slice> ::= <list_string>'['<int>':'<int>']' | <list_string>'[:'<int>']' | <list_string>'['<int>':]'

<getListIndexCall_string> ::= 'getIndexStringList('<list_string>', '<int>')'
<setListIndexToCall_string> ::= 'setListIndexTo('<list_string>', '<int>', '<string>')'
<deleteListItemCall_string> ::= 'deleteListItem('<list_string>', '<int>')'

<call> ::= <list_string_var>'.insert('<int>','<string>')'
         | <deleteListItemCall_string>
         | <setListIndexToCall_string>

// Add to

<call> ::= <list_string_var>'.append('<string>')'

<for> ::= <loop-header>'for forCounter% in '<list_string><loop-block>
        | <loop-header>'for '<string_var>' in '<list_string><loop-block>

// Return int

<int> ::= 'len('<list_string>')'

// Return string

<string> ::= <string>'.join('<list_string>')' | <getListIndexCall_string>

// Return bool

<bool> ::= <string> <in_list_comp_op> <list_string> | <list_string> <list_comp_op> <list_string>
