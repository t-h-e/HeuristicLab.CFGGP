// *****************************************************************************
// list grammar for string list
// *****************************************************************************
//
// depends on: string (string, string_var)
// return: list of int
//         string (optional)
//         bool (optional)
// *****************************************************************************

<list_string_var> ::= 'list_string'

<list_string_assign> ::= <list_string_var>' = '<list_string>

<list_string> ::= <list_string_var> | <list_string_slice>
                | <string>'.split()' | <string>'.split('<string>')'
<list_string_slice> ::= <list_string>'['<int>':'<int>']' | <list_string>'[:'<int>']' | <list_string>'['<int>':]'

<getListIndexCall_string> ::= 'getIndexStringList('<list_string>', '<int>')'
<setListIndexToCall_string> ::= 'setListIndexTo('<list_string>', '<int>', '<string>')'
<deleteListItemCall_string> ::= 'deleteListItem('<list_string>', '<int>')'

// Add to

<call> ::= <list_string_var>'.append('<string>')'
         | <list_string_var>'.insert('<int>','<string>')'
         | <deleteListItemCall_string>
         | <setListIndexToCall_string>

<for> ::= <loop-header>'for forCounter% in '<list_string><loop-block>
        | <loop-header>'for '<string_var>' in '<list_string><loop-block>

// Generic for all

<in_list_comp_op> ::= 'in'|'not in'

// Return string

<ret_string> ::= <getListIndexCall_string>
             | 'min('<list_string>')'
             | 'max('<list_string>')'
             | <string>'.join('<list_string>')'

// Return bool

<ret_bool> ::= <string> <in_list_comp_op> <list_string>

// *****************************************************************************
// Helper Code
// *****************************************************************************

def getIndexStringList(curList, index):
  if not curList:
    return str()
  return curList[index % len(curList)]
