// *****************************************************************************
// Median grammar
// *****************************************************************************

// structure

<predefined> ::= 'b0 = b1 = b2 = bool()'
                 'i0 = i1 = i2 = int()'
                 'res = int()'
                 <code>

// *****************************************************************************
<bool_var> ::= 'b0' | 'b1' | 'b2'
<int_var> ::= 'i0' | 'i1' | 'i2' | 'inList[0]' | 'inList[1]' | 'inList[2]' | 'res'
// *****************************************************************************

<code> ::= <code><statement>'\n' | <statement>'\n'<code> | <statement>'\n'<code><statement>'\n' | <statement>'\n'

<statement> ::= <assign> | <compound_stmt>
<compound_stmt> ::= <if> | <while>

            // from bool
<assign> ::= <bool_assign>
           // from int
           | <int_assign>

<if> ::= <if-then> | <if-then><else>

<if-then> ::= 'if '<bool><block>
<else> ::= 'else'<block>

<block> ::= ':{:\n'<code>':}'


<while> ::= <loop-header>'while '<bool><loop-block>

<loop-header> ::= 'loopBreak% = 0\n'
// stop is set by outer code to break immediately
<loop-block> ::=' :{:\n'<code>'\nif loopBreak% > loopBreakConst or stop:{:\nbreak\n:}\nloopBreak% += 1:}'

// bool

<bool_assign> ::= <bool_var>' = '<bool>

<bool> ::= <bool_var> | <bool_const>
         | <bool_pre> <bool>
         | '(' <bool> <bool_op> <bool> ')'
         // from int
         | <int> <comp_op> <int>

<bool_op> ::= 'and' | 'or'
<bool_pre> ::= 'not'

<bool_const> ::= 'True' | 'False'

// int

<int_assign> ::= <int_var> '=' <int> | <int_var> <arith_assign> <int>

<int> ::= <int_var> | <int_const>
        | <arith_prefix><int>
        | '(' <int> <arith_ops> <int> ')'
        | <int_arith_ops_protected>'('<int>','<int>')'
        | 'min('<int>', '<int>')'
        | 'max('<int>', '<int>')'
        | 'abs('<int>')'

// avoid leading zeros, which lead to a syntax error
<int_const>   ::= <num><int_const_2> | <num+zero>
<int_const_2> ::= <int_const_2><num+zero> | <num+zero>
<num> ::=  1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<num+zero> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<arith_assign> ::= <arith_ops>'='
<arith_ops> ::= '+'|'-'|'*'
// ** raises ZeroDivision error when 'a = 0; a ** ~a'
// |'**'

<int_arith_ops_protected> ::= 'divInt' | 'mod'
<arith_prefix> ::= '+'|'-'
//|'~'

<comp_op> ::= '<'|'>'|'=='|'>='|'<='|'!='|'is'|'is not'
