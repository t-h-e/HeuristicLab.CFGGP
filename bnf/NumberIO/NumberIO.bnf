// *****************************************************************************
// combination of all types of grammars
// *****************************************************************************

// structure

<predefined> ::= 'i0 = i1 = i2 = int()'
                 'f0 = f1 = f2 = float()'
                 'res = int()'
                 <code>

// *****************************************************************************
<int_var> ::= 'i0' | 'i1' | 'i2' | 'inList[0]' | 'res'
<float_var> ::= 'f0' | 'f1' | 'f2' | 'inList[1]'
// *****************************************************************************


<code> ::= <code><assign>'\n' | <assign>'\n'<code> | <assign>'\n'

            // from int
<assign> ::= <int_assign>
            // from float
            | <float_assign>

// int

<int_assign> ::= <int_var> '=' <int> | <int_var> <arith_assign> <int>

<int> ::= <int_var> | <int_const>
        // | <arith_prefix><int>
        | '(' <int> <arith_ops> <int> ')'
        | <arith_ops_protected>'('<int>','<int>')'
        | 'min('<int>', '<int>')'
        | 'max('<int>', '<int>')'
        // | 'abs('<int>')'
        // from float
        | <float_to_int>

<float_to_int> ::= 'int(round('<float>'))' | 'int(math.ceil('<float>'))' | 'int(math.floor('<float>'))'

// avoid leading zeros, which lead to a syntax error
<int_const>   ::= <num><int_const_2> | <num+zero>
<int_const_2> ::= <int_const_2><num+zero> | <num+zero>
<num> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<num+zero> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<arith_assign> ::= <arith_ops>'='
<arith_ops> ::= '+'|'-'|'*'
// ** raises ZeroDivision error when 'a = 0; a ** ~a'
// |'**'

<arith_ops_protected> ::= 'div' | 'divInt' | 'mod'
<arith_prefix> ::= '+'|'-'
//|'~'

// float

<float_assign> ::= <float_var> '=' <float> | <float_var> <arith_assign> <float>

<float> ::= <float_var> | <float_const> | <int>
        // | <arith_prefix><float>
        | '(' <float> <arith_ops> <float> ')' | '(' <int> <arith_ops> <float> ')' | '(' <float> <arith_ops> <int> ')'
        | <arith_ops_protected>'('<float>','<float>')' | <arith_ops_protected>'('<int>','<float>')' | <arith_ops_protected>'('<float>','<int>')'
        | 'min('<float>', '<float>')' | 'min('<int>', '<float>')' | 'min('<float>', '<int>')'
        | 'max('<float>', '<float>')' | 'max('<int>', '<float>')' | 'max('<float>', '<int>')'

// cannot use <int_const>.<int_const>, because int_const cannot have leading zeros
<float_const> ::= <float_const_part>'.'<float_const_part>
<float_const_part> ::= <float_const_part><num+zero> | <num+zero>
