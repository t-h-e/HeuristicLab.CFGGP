// *****************************************************************************
// ReplaceSpaceWithNewline grammar
// *****************************************************************************

// structure

<predefined> ::= 'b0 = b1 = b2 = bool()'
                 'i0 = i1 = i2 = int()'
                 's0 = s1 = s2 = str()'
                 'res = str()'
                 <code>

// *****************************************************************************
<bool_var> ::= 'b0' | 'b1' | 'b2'
<int_var> ::= 'i0' | 'i1' | 'i2'
<string_var> ::= 's0' | 's1' | 's2' | 'in0' | 'res'
// *****************************************************************************

<code> ::= <code><statement>'\n' | <statement>'\n'

<statement> ::= <assign> | <compound_stmt>
<compound_stmt> ::= <if> | <while>

            // from bool
<assign> ::= <bool_assign>
           // from int
           | <int_assign>
           // from string
           | <string_assign>

<if> ::= <if-then> | <if-then><else>

<if-then> ::= 'if '<bool><block>
<else> ::= 'else'<block>

<block> ::= ':{:\n'<code>':}'


<while> ::= <loop-header>'while '<bool><loop-block>

<loop-header> ::= 'loopBreak% = 0\n'
// stop.value is set by outer code to break immediately
<loop-block> ::=':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}\nloopBreak% += 1:}'

// bool

<bool_assign> ::= <bool_var>' = '<bool>

<bool> ::= <bool_var> | <bool_const>
         | <bool_pre> <bool>
         | '(' <bool> <bool_op> <bool> ')'
         // from int
         | <int> <comp_op> <int>
         // from string
         | <string>' in '<string> | <string>' not in '<string>
         | <string>' == '<string> | <string>' != '<string>
         | <string>'.startswith('<string>')' | <string>'.endswith('<string>')'

<bool_op> ::= 'and' | 'or'
<bool_pre> ::= 'not'

<bool_const> ::= 'True' | 'False'

// int

<int_assign> ::= <int_var> '=' <int> | <int_var> <arith_assign> <int>

<int> ::= <int_var> | <int_const>
        | <arith_prefix><int>
        | '(' <int> <arith_ops> <int> ')'
        | <int_arith_ops_protected>'('<int>','<int>')'
        | 'min('<int>', '<int>')'
        | 'max('<int>', '<int>')'
        | 'abs('<int>')'
        // from string
        | 'len('<string>')' | <saveOrd>

// to avoid problems with leading zeros in python int
<int_const> ::= 'int('<number>'.0)'
<number> ::= <number><num> | <num>
<num> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<arith_assign> ::= <arith_ops>'='
<arith_ops> ::= '+'|'-'|'*'
// ** raises ZeroDivision error when 'a = 0; a ** ~a'
// |'**'

<int_arith_ops_protected> ::= 'divInt' | 'mod'
<arith_prefix> ::= '+'|'-'
//|'~'

<comp_op> ::= '<'|'>'|'=='|'>='|'<='|'!='|'is'|'is not'

// string

<string_assign> ::= <string_var>' = '<string>

<string> ::= <string_var> | <string_const>
           | '('<string>' + '<string>')'
           | <string_slice>
           | <getStringIndexCall>
           | <string>'.lstrip()' | <string>'.rstrip()' | <string>'.strip()' | <string>'.lstrip('<string>')' | <string>'.rstrip('<string>')' | <string>'.strip('<string>')'
           | <string>'.capitalize()'
           | <saveChr>

<string_slice> ::= <string>'['<int>':'<int>']' | <string>'[:'<int>']' | <string>'['<int>':]'

<getStringIndexCall> ::= 'getCharFromString('<string>', '<int>')'

<string_const> ::= "'"<string_const_part>"'"
<string_const_part> ::= <string_const_part><string_literal> | <string_literal>
<string_literal> ::= '' | '\\\n' | '\\\t' | ' ' | '!' | '"' | '#' | '$' | '%' | '&' | "\\'" | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '[' | '\\\\' | ']' | '^' | '_' | '`' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | '{' | '|' | '}'

<saveChr> ::= 'saveChr('<int>')'
<saveOrd> ::= 'saveOrd('<string>')'
