// *****************************************************************************
// float grammar
// *****************************************************************************

<float_var> ::= // placholder for variable names

<assign> ::= <float_assign>
<float_assign> ::= <float_var> '=' <float> | <float_var> <arith_assign> <float>

<float> ::= <float_var> | <float_const>
        | <arith_prefix><float>
        | '('<float> <arith_ops> <float>')'
        | <float_arith_ops_protected>'('<float>','<float>')'
        | 'math.ceil('<float>')' | 'math.floor('<float>')' | 'round('<float>')'
        | 'min('<float>', '<float>')'
        | 'max('<float>', '<float>')'
        | 'abs('<float>')'
        | 'math.sin('<float>')' | 'math.cos('<float>')' | 'math.tan('<float>')'
        | '('<float> '+ 1)' | '('<float> '- 1)'

<float_const> ::= <number>'.'<number>

<float_arith_ops_protected> ::= 'div' | 'divInt' | 'mod'

// Return int

// have to call int() for python 2.7.5
<int> ::= 'int(math.ceil('<float>'))' | 'int(math.floor('<float>'))' | 'int(round('<float>'))' | 'int('<float>')'

// Return bool

<bool> ::= '('<float> <comp_op> <float>')' | 'bool('<float>')'

// Return char

<char> ::= 'float_to_chr('<float>')'

// Return string

<string> ::= 'str('<float>')'
