// *****************************************************************************
// list grammar for float list
// *****************************************************************************

<list_float_var> ::= // placholder for variable names

<assign> ::= <list_float_assign>
<list_float_assign> ::= <list_float_var>' = '<list_float>

<list_float> ::= <list_float_var> | <list_float_slice>
               | 'list(reversed('<list_float>'))'
               | '[x if x == '<float>' else '<float>' for x in '<list_float>']'
               | 'replaceFirstElementInList('<list_float>','<float>','<float>')'
               | '[x for x in '<list_float>' if x == '<float>']'
<list_float_slice> ::= <list_float>'['<int>':'<int>']' | <list_float>'[:'<int>']' | <list_float>'['<int>':]'
                     | <list_float>'[1:]' | <list_float>'[:1]'

<getListIndexCall_float> ::= 'getIndexFloatList('<list_float>', '<int>')'
<setListIndexToCall_float> ::= 'setListIndexTo('<list_float>', '<int>', '<float>')'
<deleteListItemCall_float> ::= 'deleteListItem('<list_float>', '<int>')'

// Return float

<float> ::= <getListIndexCall_float> | 'getIndexFloatList('<list_float>', 0)' | 'getIndexFloatList('<list_float>', -1)'

// Add to

<call> ::= <list_float_var>'.append('<float>')'
         | <list_float_var>'.insert('<int>','<float>')'
         | <list_float_var>'.insert(0,'<float>')'
         | <deleteListItemCall_float>
         | <setListIndexToCall_float>

<for> ::= <loop-header>'for forCounter% in '<list_float><loop-block>
        | <loop-header>'for '<float_var>' in '<list_float><loop-block>

// Return int

<int> ::= 'len('<list_float>')' | 'saveIndex('<list_float>', '<float>')' | <list_float>'.count('<float>')'

// Return bool

<bool> ::= <float> <in_list_comp_op> <list_float> | <list_float> <list_comp_op> <list_float> | <list_float>' == []'
