// *****************************************************************************
// combination of all types of grammars
// *****************************************************************************

// structure

<predefined> ::= 'b0 = b1 = b2 = bool()'
                 'i0 = i1 = i2 = int()'
                 'f0 = f1 = f2 = float()'
                 's0 = s1 = s2 = str()'
                 'lb0 = lb1 = lb2 = []'
                 'li0 = li1 = li2 = []'
                 'lf0 = lf1 = lf2 = []'
                 'ls0 = ls1 = ls2 = []'
                 'res = int()'
                 <code>

// *****************************************************************************
<bool_var> ::= 'b0' | 'b1' | 'b2'
<int_var> ::= 'i0' | 'i1' | 'i2'
<float_var> ::= 'f0' | 'f1' | 'f2'
<string_var> ::= 's0' | 's1' | 's2'
<list_bool_var> ::= 'lb0' | 'lb1' | 'lb2'
<list_int_var> ::= 'li0' | 'li1' | 'li2'
<list_float_var> ::= 'lf0' | 'lf1' | 'lf2'
<list_string_var> ::= 'ls0' | 'ls1' | 'ls2'
// *****************************************************************************


<code> ::= <code><statement>'\n' | <statement>'\n'

<statement> ::= <simple_stmt> | <compound_stmt>
<simple_stmt> ::= <call> | <assign>
<compound_stmt> ::= <if> | <while> | <for>

         // from bool
<call> ::= <list_bool_var>'.append('<bool>')'
         | <list_bool_var>'.insert('<int>','<bool>')'
         | <deleteListItemCall_bool>
         | <setListIndexToCall_bool>
         // from int
         | <list_int_var>'.append('<int>')'
         | <list_int_var>'.insert('<int>','<int>')'
         | <deleteListItemCall_int>
         | <setListIndexToCall_int>
         // from float
         | <list_float_var>'.append('<float>')'
         | <list_float_var>'.insert('<int>','<float>')'
         | <deleteListItemCall_float>
         | <setListIndexToCall_float>
         // from string
         | <list_string_var>'.append('<string>')'
         | <list_string_var>'.insert('<int>','<string>')'
         | <deleteListItemCall_string>
         | <setListIndexToCall_string>

            // from bool
<assign> ::= <bool_assign>
            // from int
            | <int_assign>
            // from float
            | <float_assign>
            // from string
            | <string_assign>
            // from list_bool
            | <list_bool_assign>
            // from list_int
            | <list_int_assign>
            // from list_flaot
            | <list_float_assign>
            // from list_string
            | <list_string_assign>

<if> ::= <if-then> | <if-then><else>

<if-then> ::= 'if '<bool><block>
<else> ::= 'else'<block>

<block> ::= ':{:\n'<code>'\n:}\n'

<while> ::= <loop-header>'while '<bool><loop-block>
        // from bool
<for> ::= <loop-header>'for forCounter% in '<list_bool><loop-block>
        | <loop-header>'for '<bool_var>' in '<list_bool><loop-block>
        //from int
        | <loop-header>'for forCounter% in '<list_int><loop-block>
        | <loop-header>'for '<int_var>' in '<list_int><loop-block>
        //from float
        | <loop-header>'for forCounter% in '<list_float><loop-block>
        | <loop-header>'for '<float_var>' in '<list_float><loop-block>
        // from string
        | <loop-header>'for forCounter% in '<list_string><loop-block>
        | <loop-header>'for '<string_var>' in '<list_string><loop-block>

<loop-header> ::= 'loopBreak% = 0\n'
// stop[0] is set by outer code to break immediately
<loop-block> ::=' :{:\n'<code>'\nif loopBreak% > loopBreakConst or stop[0]:{:\nbreak\n:}\nloopBreak% += 1:}\n'

// bool

<bool_assign> ::= <bool_var>' = '<bool>

<bool> ::= <bool_var> | <bool_const>
         | <bool_pre> <bool>
         | '(' <bool> <bool_op> <bool> ')'
         // from int
         | <int> <comp_op> <int>
         // from float
         | <float> <comp_op> <float> | <int> <comp_op> <float> | <float> <comp_op> <int>
         // from string
         | <string>' in '<string> | <string>' not in '<string>
         | <string>'.startswith('<string>')' | <string>'.endswith('<string>')'
         // from list_bool
         | <getListIndexCall_bool> | <bool> <in_list_comp_op> <list_bool>
         // from list_int
         | <int> <in_list_comp_op> <list_int>
         // from list_float
         | <float> <in_list_comp_op> <list_float>
         // from list_string
         | <string> <in_list_comp_op> <list_string>
         | <string>' == '<string> | <string>' != '<string>
         | <string>'.startswith('<string>')' | <string>'.endswith('<string>')'

<bool_op> ::= 'and' | 'or'
<bool_pre> ::= 'not'

<bool_const> ::= 'True' | 'False'

// int

<int_assign> ::= <int_var> '=' <int> | <int_var> <arith_assign> <int>

<int> ::= <int_var> | <int_const>
        | <arith_prefix><int>
        | '(' <int> <arith_ops> <int> ')'
        | <arith_ops_protected>'('<int>','<int>')'
        | 'min('<int>', '<int>')'
        | 'max('<int>', '<int>')'
        | 'abs('<int>')'
        // from float
        | 'int(math.ceil('<float>'))' | 'int(math.floor('<float>'))' | 'int(round('<float>'))'
        // from string
        | 'len('<string>')' | <saveOrd>
        // from list_bool
        | 'len('<list_bool>')'
        // from list_int
        | <getListIndexCall_int>
        | 'len('<list_int>')'
        // from list_float
        | 'len('<list_float>')'
        // from list_string
        | 'len('<list_string>')'

// to avoid problems with leading zeros in python int
<int_const> ::= 'int('<number>'.0)'
<number> ::= <number><num> | <num>
<num> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<arith_assign> ::= <arith_ops>'='
<arith_ops> ::= '+'|'-'|'*'
// ** raises ZeroDivision error when 'a = 0; a ** ~a'
// |'**'

<arith_ops_protected> ::= 'div' | 'divInt' | 'mod'
<arith_prefix> ::= '+'|'-'
//|'~'

<comp_op> ::= '<'|'>'|'=='|'>='|'<='|'!='|'is'|'is not'

// float

<float_assign> ::= <float_var> '=' <float> | <float_var> <arith_assign> <float>

<float> ::= <float_var> | <float_const> | <int>
        | <arith_prefix><float>
        | '(' <float> <arith_ops> <float> ')' | '(' <int> <arith_ops> <float> ')' | '(' <float> <arith_ops> <int> ')'
        | <arith_ops_protected>'('<float>','<float>')' | <arith_ops_protected>'('<int>','<float>')' | <arith_ops_protected>'('<float>','<int>')'
        | 'math.ceil('<float>')' | 'math.floor('<float>')' | 'round('<float>')'
        | 'min('<float>', '<float>')' | 'min('<int>', '<float>')' | 'min('<float>', '<int>')'
        | 'max('<float>', '<float>')' | 'max('<int>', '<float>')' | 'max('<float>', '<int>')'
        | 'abs('<float>')'
        // from list_float
        | <getListIndexCall_float>

<float_const> ::= <number>'.'<number>

// from string

<string_assign> ::= <string_var>' = '<string>

<string> ::= <string_var> | <string_const>
           | '('<string>' + '<string>')'
           //may not be used
           | '('<string>' * '<int>')'
           | <string_slice>
           | <getStringIndexCall>
           | <string>'.lstrip()' | <string>'.rstrip()' | <string>'.strip()' | <string>'.lstrip('<string>')' | <string>'.rstrip('<string>')' | <string>'.strip('<string>')'
           | <string>'.capitalize()'
           // from list_string
           | <getListIndexCall_string>
           | <string>'.join('<list_string>')'

<string_slice> ::= <string>'['<int>':'<int>']' | <string>'[:'<int>']' | <string>'['<int>':]'

<getStringIndexCall> ::= 'getCharFromString('<string>', '<int>')'

<string_const> ::= "'"<string_const_part>"'"
<string_const_part> ::= <string_const_part><string_literal> | <string_literal>
<string_literal> ::= '' | '\\\n' | '\\\t' | ' ' | '!' | '"' | '#' | '$' | '%' | '&' | "\\'" | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '[' | '\\\\' | ']' | '^' | '_' | '`' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | '{' | '|' | '}'

<saveChr> ::= 'saveChr('<int>')'
<saveOrd> ::= 'saveOrd('<string>')'

// from list

<in_list_comp_op> ::= 'in'|'not in'

// from list_bool

<list_bool_assign> ::= <list_bool_var>' = '<list_bool>

<list_bool> ::= <list_bool_var> | <list_bool_slice>
<list_bool_slice> ::= <list_bool>'['<int>':'<int>']' | <list_bool>'[:'<int>']' | <list_bool>'['<int>':]'

<getListIndexCall_bool> ::= 'getIndexBoolList('<list_bool>', '<int>')'
<setListIndexToCall_bool> ::= 'setListIndexTo('<list_bool>', '<int>', '<bool>')'
<deleteListItemCall_bool> ::= 'deleteListItem('<list_bool>', '<int>')'

// from list_int

<list_int_assign> ::= <list_int_var>' = '<list_int>

<list_int> ::= <list_int_var> | <list_int_range> | <list_int_slice>
<list_int_slice> ::= <list_int>'['<int>':'<int>']' | <list_int>'[:'<int>']' | <list_int>'['<int>':]'
<list_int_range> ::= 'list(range('<int>','<int>'))'

<getListIndexCall_int> ::= 'getIndexIntList('<list_int>', '<int>')'
<setListIndexToCall_int> ::= 'setListIndexTo('<list_int>', '<int>', '<int>')'
<deleteListItemCall_int> ::= 'deleteListItem('<list_int>', '<int>')'

// from list_float

<list_float_assign> ::= <list_float_var>' = '<list_float>

<list_float> ::= <list_float_var> | <list_float_slice>
<list_float_slice> ::= <list_float>'['<int>':'<int>']' | <list_float>'[:'<int>']' | <list_float>'['<int>':]'

<getListIndexCall_float> ::= 'getIndexFloatList('<list_float>', '<int>')'
<setListIndexToCall_float> ::= 'setListIndexTo('<list_float>', '<int>', '<float>')'
<deleteListItemCall_float> ::= 'deleteListItem('<list_float>', '<int>')'

// from list_string

<list_string_assign> ::= <list_string_var>' = '<list_string>

<list_string> ::= <list_string_var> | <list_string_slice>
                | 'saveSplit('<string>','<string>')'
<list_string_slice> ::= <list_string>'['<int>':'<int>']' | <list_string>'[:'<int>']' | <list_string>'['<int>':]'

<getListIndexCall_string> ::= 'getIndexStringList('<list_string>', '<int>')'
<setListIndexToCall_string> ::= 'setListIndexTo('<list_string>', '<int>', '<string>')'
<deleteListItemCall_string> ::= 'deleteListItem('<list_string>', '<int>')'
