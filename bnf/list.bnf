// *****************************************************************************
// list grammar for a generic type
// *****************************************************************************
//
// depends on: type (type, type_var)
// return: list of int
//         type (optional)
//         bool (optional)
// *****************************************************************************

<list_type_var> ::= 'listvar_type'

<list_type_assign> ::= <list_type_var>' = '<list_type>

<list_type> ::= <list_type_var> | <list_type_slice>
<list_type_slice> ::= <list>'['<int>':'<int>']' | <list>'[:'<int>']' | <list>'['<int>':]'

<getListIndexCall_type> ::= 'getIndexTypeList('<list_type>', '<int>')'
<setListIndexToCall_type> ::= 'setListIndexTo('<list_type>', '<int>', '<type>')'

// Add to

<call> ::= <list_type_var>'.append('<type>')'
         | <list_type_var>'.insert('<int>','<type>')'
         | <deleteListItemCall>
         | <setListIndexToCall>

<for> ::= <loop-header>'for forCounter% in '<list_type><loop-block>
        | <loop-header>'for '<type_var>' in '<list_type><loop-block>

// Generic for all

<in_list_comp_op> ::= 'in'|'not in'
<deleteListItemCall> ::= 'deleteListItem('<list>', '<int>')'

// Return type

<ret_type> ::= <getListIndexCall_type>

// Return bool

<ret_bool> ::= <type> <in_list_comp_op> <list_type>

// *****************************************************************************
// Helper Code
def getIndexTypeList(curList, index):
  if not curList:
    return type()
  return curList[index % len(curList)]


// Generic for all
def deleteListItem(curList, index):
  if not curList:
    return
  del curList[index % len(curList)]


def setListIndexTo(curList, index, value):
  if not curList:
    return
  curList[index % len(curList)] = value
