inval = [[5110693006], [2971046381], [5567350313], [8202668977], [9179450068],
                                             [-9754458237], [3616105467], [-9592297980], [-3894688068], [764982691],
                                             [7270665336], [-20], [4509138185], [3324084589], [-2277603857],
                                             [446199207], [30000000], [6697835475], [3795583360], [1684148637],
                                             [1041831803], [7175862696], [9998887776], [8697654102], [-2175555555],
                                             [-7944508986], [-6434339676], [19], [3661379823], [24068], [-1386490948],
                                             [-5483140526], [3794462709], [-180654572], [1520278333], [962394169],
                                             [2839505514], [-5571875116], [-5590231698], [-8361466350], [-6481020385],
                                             [-2830215450], [-20008000], [-5424939263], [-1187708843], [-9617448709],
                                             [-2095180312], [5110446112], [620], [7991338130], [4100664221],
                                             [4124906817], [-8965838719], [7803120780], [-97], [9560680817],
                                             [659087598], [-9537244578], [8313227], [4668474262], [-3112088917],
                                             [-829374576], [6944833044], [-3549881819], [-1109111207], [-3565887939],
                                             [8964119814], [-4724648911], [1378751239], [-777777], [4807618549],
                                             [4749661721], [-482], [-1958209397], [-4128783894], [8292697565],
                                             [-3417608170], [-1528743422], [20293221], [2200913587], [-5851511983],
                                             [-2221440002], [1532257758], [-704580666], [-4038689127], [-1459295517],
                                             [512000], [0], [-9876], [-6216868516], [-4745240770], [-303639490],
                                             [209743837], [-386253400], [-9495969798], [-4762977659], [2128168037],
                                             [-4639340164], [7964997468], [1578525891], ]
outval = [[[6, 0, 0, 3, 9, 6, 0, 1, 1, 5]], [[1, 8, 3, 6, 4, 0, 1, 7, 9, 2]], [[3, 1, 3, 0, 5, 3, 7, 6, 5, 5]],
          [[7, 7, 9, 8, 6, 6, 2, 0, 2, 8]], [[8, 6, 0, 0, 5, 4, 9, 7, 1, 9]], [[7, 3, 2, 8, 5, 4, 4, 5, 7, -9]],
          [[7, 6, 4, 5, 0, 1, 6, 1, 6, 3]], [[0, 8, 9, 7, 9, 2, 2, 9, 5, -9]], [[8, 6, 0, 8, 8, 6, 4, 9, 8, -3]],
          [[1, 9, 6, 2, 8, 9, 4, 6, 7]], [[6, 3, 3, 5, 6, 6, 0, 7, 2, 7]], [[0, -2]], [[5, 8, 1, 8, 3, 1, 9, 0, 5, 4]],
          [[9, 8, 5, 4, 8, 0, 4, 2, 3, 3]], [[7, 5, 8, 3, 0, 6, 7, 7, 2, -2]], [[7, 0, 2, 9, 9, 1, 6, 4, 4]],
          [[0, 0, 0, 0, 0, 0, 0, 3]], [[5, 7, 4, 5, 3, 8, 7, 9, 6, 6]], [[0, 6, 3, 3, 8, 5, 5, 9, 7, 3]],
          [[7, 3, 6, 8, 4, 1, 4, 8, 6, 1]], [[3, 0, 8, 1, 3, 8, 1, 4, 0, 1]], [[6, 9, 6, 2, 6, 8, 5, 7, 1, 7]],
          [[6, 7, 7, 7, 8, 8, 8, 9, 9, 9]], [[2, 0, 1, 4, 5, 6, 7, 9, 6, 8]], [[5, 5, 5, 5, 5, 5, 5, 7, 1, -2]],
          [[6, 8, 9, 8, 0, 5, 4, 4, 9, -7]], [[6, 7, 6, 9, 3, 3, 4, 3, 4, -6]], [[9, 1]],
          [[3, 2, 8, 9, 7, 3, 1, 6, 6, 3]], [[8, 6, 0, 4, 2]], [[8, 4, 9, 0, 9, 4, 6, 8, 3, -1]],
          [[6, 2, 5, 0, 4, 1, 3, 8, 4, -5]], [[9, 0, 7, 2, 6, 4, 4, 9, 7, 3]], [[2, 7, 5, 4, 5, 6, 0, 8, -1]],
          [[3, 3, 3, 8, 7, 2, 0, 2, 5, 1]], [[9, 6, 1, 4, 9, 3, 2, 6, 9]], [[4, 1, 5, 5, 0, 5, 9, 3, 8, 2]],
          [[6, 1, 1, 5, 7, 8, 1, 7, 5, -5]], [[8, 9, 6, 1, 3, 2, 0, 9, 5, -5]], [[0, 5, 3, 6, 6, 4, 1, 6, 3, -8]],
          [[5, 8, 3, 0, 2, 0, 1, 8, 4, -6]], [[0, 5, 4, 5, 1, 2, 0, 3, 8, -2]], [[0, 0, 0, 8, 0, 0, 0, -2]],
          [[3, 6, 2, 9, 3, 9, 4, 2, 4, -5]], [[3, 4, 8, 8, 0, 7, 7, 8, 1, -1]], [[9, 0, 7, 8, 4, 4, 7, 1, 6, -9]],
          [[2, 1, 3, 0, 8, 1, 5, 9, 0, -2]], [[2, 1, 1, 6, 4, 4, 0, 1, 1, 5]], [[0, 2, 6]],
          [[0, 3, 1, 8, 3, 3, 1, 9, 9, 7]], [[1, 2, 2, 4, 6, 6, 0, 0, 1, 4]], [[7, 1, 8, 6, 0, 9, 4, 2, 1, 4]],
          [[9, 1, 7, 8, 3, 8, 5, 6, 9, -8]], [[0, 8, 7, 0, 2, 1, 3, 0, 8, 7]], [[7, -9]],
          [[7, 1, 8, 0, 8, 6, 0, 6, 5, 9]], [[8, 9, 5, 7, 8, 0, 9, 5, 6]], [[8, 7, 5, 4, 4, 2, 7, 3, 5, -9]],
          [[7, 2, 2, 3, 1, 3, 8]], [[2, 6, 2, 4, 7, 4, 8, 6, 6, 4]], [[7, 1, 9, 8, 8, 0, 2, 1, 1, -3]],
          [[6, 7, 5, 4, 7, 3, 9, 2, -8]], [[4, 4, 0, 3, 3, 8, 4, 4, 9, 6]], [[9, 1, 8, 1, 8, 8, 9, 4, 5, -3]],
          [[7, 0, 2, 1, 1, 1, 9, 0, 1, -1]], [[9, 3, 9, 7, 8, 8, 5, 6, 5, -3]], [[4, 1, 8, 9, 1, 1, 4, 6, 9, 8]],
          [[1, 1, 9, 8, 4, 6, 4, 2, 7, -4]], [[9, 3, 2, 1, 5, 7, 8, 7, 3, 1]], [[7, 7, 7, 7, 7, -7]],
          [[9, 4, 5, 8, 1, 6, 7, 0, 8, 4]], [[1, 2, 7, 1, 6, 6, 9, 4, 7, 4]], [[2, 8, -4]],
          [[7, 9, 3, 9, 0, 2, 8, 5, 9, -1]], [[4, 9, 8, 3, 8, 7, 8, 2, 1, -4]], [[5, 6, 5, 7, 9, 6, 2, 9, 2, 8]],
          [[0, 7, 1, 8, 0, 6, 7, 1, 4, -3]], [[2, 2, 4, 3, 4, 7, 8, 2, 5, -1]], [[1, 2, 2, 3, 9, 2, 0, 2]],
          [[7, 8, 5, 3, 1, 9, 0, 0, 2, 2]], [[3, 8, 9, 1, 1, 5, 1, 5, 8, -5]], [[2, 0, 0, 0, 4, 4, 1, 2, 2, -2]],
          [[8, 5, 7, 7, 5, 2, 2, 3, 5, 1]], [[6, 6, 6, 0, 8, 5, 4, 0, -7]], [[7, 2, 1, 9, 8, 6, 8, 3, 0, -4]],
          [[7, 1, 5, 5, 9, 2, 9, 5, 4, -1]], [[0, 0, 0, 2, 1, 5]], [[]], [[6, 7, 8, -9]],
          [[6, 1, 5, 8, 6, 8, 6, 1, 2, -6]], [[0, 7, 7, 0, 4, 2, 5, 4, 7, -4]], [[0, 9, 4, 9, 3, 6, 3, 0, -3]],
          [[7, 3, 8, 3, 4, 7, 9, 0, 2]], [[0, 0, 4, 3, 5, 2, 6, 8, -3]], [[8, 9, 7, 9, 6, 9, 5, 9, 4, -9]],
          [[9, 5, 6, 7, 7, 9, 2, 6, 7, -4]], [[7, 3, 0, 8, 6, 1, 8, 2, 1, 2]], [[4, 6, 1, 0, 4, 3, 9, 3, 6, -4]],
          [[8, 6, 4, 7, 9, 9, 4, 6, 9, 7]], [[1, 9, 8, 5, 2, 5, 8, 7, 5, 1]], ]
# *****************************************************************************
# Helper Code
# *****************************************************************************
import math


def div(nom, denom):
    if denom <= 0.00001:
        return nom
    else:
        return nom / denom


def divInt(nom, denom):
    if denom <= 0.00001:
        return nom
    else:
        return nom // denom


def mod(nom, denom):
    if denom <= 0.00001:
        return nom
    else:
        return nom % denom


def deleteListItem(curList, index):
    if not curList:
        return
    del curList[index % len(curList)]


def setListIndexTo(curList, index, value):
    if not curList:
        return
    curList[index % len(curList)] = value


def getIndexBoolList(curList, index):
    if not curList:
        return bool()
    return curList[index % len(curList)]


def getIndexFloatList(curList, index):
    if not curList:
        return float()
    return curList[index % len(curList)]


def getIndexIntList(curList, index):
    if not curList:
        return int()
    return curList[index % len(curList)]


def getIndexStringList(curList, index):
    if not curList:
        return str()
    return curList[index % len(curList)]


def getCharFromString(curString, index):
    if not curString:
        return ''
    return curString[index % len(curString)]


def saveChr(number):
    return chr(number % 1114111)


def saveOrd(literal):
    if len(literal) <= 0:
        return 32
    return ord(literal[0])


def saveSplit(curString, separator):
    if not separator:
        return []
    return curString.split(separator)


def saveRange(start, end):
    if end > start and abs(start - end) > 10000:
        return range(start, start + 10000)
    return range(start, end)


# *****************************************************************************

#  evolved function
def evolve(in0):
    # constant defines allowed maximum number of all loops performed
    loopBreakConst = 1500
    # initialises variable which should be used to count the number of loop iterations
    loopBreak = 0
    # stop[0] is a boolean flag which should be used to check if the EA wants the program to stop[0]
    b0 = b1 = b2 = bool()
    i0 = i1 = i2 = int()
    li0, li1, li2 = [], [], []
    res = []

    for i2 in list(saveRange(len(li1), int(4.0))):
        res.append(int(4.0))
        li0.insert((min(i2, i2) - max(i0, len(res))), len(li1))

        for i0 in list(saveRange(abs(max(int(1.0), abs(i0))), len(list(saveRange(max(i0, len(res)), abs(in0)))))):
            res.insert(i2, int(4.0))
            li0.insert(len(res), len(li1))
            in0 *= abs(in0)

            if loopBreak > loopBreakConst or stop.value:
                break

            loopBreak += 1

        if loopBreak > loopBreakConst or stop.value:
            break

        loopBreak += 1

    return res


def fitnessTrainingCase(i, o):
    eval = evolve(i[0])

    # add 20 extra error for length difference, because that's the maximum difference between two elements
    return [sum([abs(x[0] - x[1]) for x in zip(eval, o[0])]) + abs(len(eval) - len(o[0])) * 20]


#  function to evaluate fitness
def fitness():
    error = []
    cases = []
    for (i, o) in zip(inval, outval):
        values = fitnessTrainingCase(i, o)
        error.extend(values)
        cases.append(all(v < 0.000000001 for v in values))

    return error, cases


import sys

quality = sys.maxsize
caseQuality, cases = fitness()
quality = sum(caseQuality)

